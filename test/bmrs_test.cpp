#include "ccl/bmrs.h"

#include <fmt/format.h>
#include <gtest/gtest.h>

#include <array>
#include <cstring>
#include <map>
#include <opencv2/opencv.hpp>
#include <string>

namespace {
std::string GetImage(const char* testname) {
    std::string filename = std::string(CMAKE_PROJECT_SOURCE_DIR) +
                           std::string("/assets/yacclab/test/") + std::string(testname) +
                           std::string(".png");
    return filename;
}
}  // namespace

TEST(Bmrs, edge_cases) {
    static const std::map<const char*, std::vector<int>> test_cases{
            {"test_8connectivity_maxlabelEE",
             {1,  0, 2,  0, 3,  0, 4,  0, 5,  0, 6,  0, 7,  0, 8,  0, 0,  0, 0,  0, 0,  0, 0,  0,
              0,  0, 0,  0, 0,  0, 0,  0, 9,  0, 10, 0, 11, 0, 12, 0, 13, 0, 14, 0, 15, 0, 16, 0,
              0,  0, 0,  0, 0,  0, 0,  0, 0,  0, 0,  0, 0,  0, 0,  0, 17, 0, 18, 0, 19, 0, 20, 0,
              21, 0, 22, 0, 23, 0, 24, 0, 0,  0, 0,  0, 0,  0, 0,  0, 0,  0, 0,  0, 0,  0, 0,  0,
              25, 0, 26, 0, 27, 0, 28, 0, 29, 0, 30, 0, 31, 0, 32, 0, 0,  0, 0,  0, 0,  0, 0,  0,
              0,  0, 0,  0, 0,  0, 0,  0, 33, 0, 34, 0, 35, 0, 36, 0, 37, 0, 38, 0, 39, 0, 40, 0,
              0,  0, 0,  0, 0,  0, 0,  0, 0,  0, 0,  0, 0,  0, 0,  0, 41, 0, 42, 0, 43, 0, 44, 0,
              45, 0, 46, 0, 47, 0, 48, 0, 0,  0, 0,  0, 0,  0, 0,  0, 0,  0, 0,  0, 0,  0, 0,  0,
              49, 0, 50, 0, 51, 0, 52, 0, 53, 0, 54, 0, 55, 0, 56, 0, 0,  0, 0,  0, 0,  0, 0,  0,
              0,  0, 0,  0, 0,  0, 0,  0, 57, 0, 58, 0, 59, 0, 60, 0, 61, 0, 62, 0, 63, 0, 64, 0,
              0,  0, 0,  0, 0,  0, 0,  0, 0,  0, 0,  0, 0,  0, 0,  0}},
            {"test_8connectivity_maxlabelEO",
             {1,  0, 2,  0, 3,  0, 4,  0, 5,  0, 6,  0, 7,  0, 8,  0, 0,  0, 0,  0, 0,  0, 0,  0,
              0,  0, 0,  0, 0,  0, 9,  0, 10, 0, 11, 0, 12, 0, 13, 0, 14, 0, 15, 0, 16, 0, 0,  0,
              0,  0, 0,  0, 0,  0, 0,  0, 0,  0, 0,  0, 17, 0, 18, 0, 19, 0, 20, 0, 21, 0, 22, 0,
              23, 0, 24, 0, 0,  0, 0,  0, 0,  0, 0,  0, 0,  0, 0,  0, 0,  0, 25, 0, 26, 0, 27, 0,
              28, 0, 29, 0, 30, 0, 31, 0, 32, 0, 0,  0, 0,  0, 0,  0, 0,  0, 0,  0, 0,  0, 0,  0,
              33, 0, 34, 0, 35, 0, 36, 0, 37, 0, 38, 0, 39, 0, 40, 0, 0,  0, 0,  0, 0,  0, 0,  0,
              0,  0, 0,  0, 0,  0, 41, 0, 42, 0, 43, 0, 44, 0, 45, 0, 46, 0, 47, 0, 48, 0, 0,  0,
              0,  0, 0,  0, 0,  0, 0,  0, 0,  0, 0,  0, 49, 0, 50, 0, 51, 0, 52, 0, 53, 0, 54, 0,
              55, 0, 56, 0, 0,  0, 0,  0, 0,  0, 0,  0, 0,  0, 0,  0, 0,  0, 57, 0, 58, 0, 59, 0,
              60, 0, 61, 0, 62, 0, 63, 0, 64, 0, 0,  0, 0,  0, 0,  0, 0,  0, 0,  0, 0,  0, 0,  0}},
            {"test_8connectivity_maxlabelOE",
             {1,  0, 2,  0, 3,  0, 4,  0, 5,  0, 6,  0, 7,  0, 8,  0, 0,  0, 0,  0, 0,  0, 0,  0,
              0,  0, 0,  0, 0,  0, 0,  0, 9,  0, 10, 0, 11, 0, 12, 0, 13, 0, 14, 0, 15, 0, 16, 0,
              0,  0, 0,  0, 0,  0, 0,  0, 0,  0, 0,  0, 0,  0, 0,  0, 17, 0, 18, 0, 19, 0, 20, 0,
              21, 0, 22, 0, 23, 0, 24, 0, 0,  0, 0,  0, 0,  0, 0,  0, 0,  0, 0,  0, 0,  0, 0,  0,
              25, 0, 26, 0, 27, 0, 28, 0, 29, 0, 30, 0, 31, 0, 32, 0, 0,  0, 0,  0, 0,  0, 0,  0,
              0,  0, 0,  0, 0,  0, 0,  0, 33, 0, 34, 0, 35, 0, 36, 0, 37, 0, 38, 0, 39, 0, 40, 0,
              0,  0, 0,  0, 0,  0, 0,  0, 0,  0, 0,  0, 0,  0, 0,  0, 41, 0, 42, 0, 43, 0, 44, 0,
              45, 0, 46, 0, 47, 0, 48, 0, 0,  0, 0,  0, 0,  0, 0,  0, 0,  0, 0,  0, 0,  0, 0,  0,
              49, 0, 50, 0, 51, 0, 52, 0, 53, 0, 54, 0, 55, 0, 56, 0, 0,  0, 0,  0, 0,  0, 0,  0,
              0,  0, 0,  0, 0,  0, 0,  0, 57, 0, 58, 0, 59, 0, 60, 0, 61, 0, 62, 0, 63, 0, 64, 0}},
            {"test_8connectivity_maxlabelOO",
             {1,  0, 2,  0, 3,  0, 4,  0, 5,  0, 6,  0, 7,  0, 8,  0, 0,  0, 0,  0, 0,  0, 0,  0,
              0,  0, 0,  0, 0,  0, 9,  0, 10, 0, 11, 0, 12, 0, 13, 0, 14, 0, 15, 0, 16, 0, 0,  0,
              0,  0, 0,  0, 0,  0, 0,  0, 0,  0, 0,  0, 17, 0, 18, 0, 19, 0, 20, 0, 21, 0, 22, 0,
              23, 0, 24, 0, 0,  0, 0,  0, 0,  0, 0,  0, 0,  0, 0,  0, 0,  0, 25, 0, 26, 0, 27, 0,
              28, 0, 29, 0, 30, 0, 31, 0, 32, 0, 0,  0, 0,  0, 0,  0, 0,  0, 0,  0, 0,  0, 0,  0,
              33, 0, 34, 0, 35, 0, 36, 0, 37, 0, 38, 0, 39, 0, 40, 0, 0,  0, 0,  0, 0,  0, 0,  0,
              0,  0, 0,  0, 0,  0, 41, 0, 42, 0, 43, 0, 44, 0, 45, 0, 46, 0, 47, 0, 48, 0, 0,  0,
              0,  0, 0,  0, 0,  0, 0,  0, 0,  0, 0,  0, 49, 0, 50, 0, 51, 0, 52, 0, 53, 0, 54, 0,
              55, 0, 56, 0, 0,  0, 0,  0, 0,  0, 0,  0, 0,  0, 0,  0, 0,  0, 57, 0, 58, 0, 59, 0,
              60, 0, 61, 0, 62, 0, 63, 0, 64}},
            {"test_maxlabel_onecolE", {1, 0, 2, 0, 3, 0, 4, 0, 5, 0, 6, 0, 7, 0, 8, 0}},
            {"test_maxlabel_onecolO", {1, 0, 2, 0, 3, 0, 4, 0, 5, 0, 6, 0, 7, 0, 8}},
            {"test_maxlabel_onerowE", {1, 0, 2, 0, 3, 0, 4, 0, 5, 0, 6, 0, 7, 0, 8, 0}},
            {"test_maxlabel_onerowO", {1, 0, 2, 0, 3, 0, 4, 0, 5, 0, 6, 0, 7, 0, 8}},
            {"test_nobackgroundEE",
             {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
              1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
              1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
              1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
              1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
              1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
              1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
              1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
              1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}},
            {"test_nobackgroundEO",
             {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
              1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
              1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
              1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
              1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
              1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
              1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
              1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
              1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}},
            {"test_nobackgroundOO",
             {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
              1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
              1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
              1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
              1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
              1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
              1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
              1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}},
            {"test_nobackgroundOO",
             {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
              1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
              1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
              1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
              1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
              1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
              1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
              1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}},
            {"test_noforegroundEE",
             {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
              0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
              0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
              0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
              0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
              0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
              0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
              0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
              0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}},
            {"test_noforegroundEO",
             {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
              0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
              0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
              0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
              0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
              0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
              0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
              0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
              0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}},
            {"test_noforegroundOE",
             {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
              0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
              0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
              0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
              0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
              0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
              0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
              0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
              0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}},
            {"test_noforegroundOO",
             {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
              0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
              0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
              0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
              0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
              0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
              0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
              0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}},
            {"sanity",
             {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
              0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
              0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
              0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
              0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
              0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
              0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
              0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0}}};

    for (auto const& [test_name, expected_value] : test_cases) {
        cv::Mat1b image = cv::imread(GetImage(test_name), cv::IMREAD_GRAYSCALE);
        apriltag::BMRS ccl{image};

        ccl.PerformLabeling();
        cv::Mat1i labels = *ccl.Labels();

        EXPECT_EQ(labels.rows * labels.cols, expected_value.size()) << test_name;

        if (labels.rows * labels.cols != expected_value.size()) {
            continue;
        }

        bool is_equal = true;
        for (int i = 0; i < expected_value.size(); i++) {
            if (((int*)labels.data)[i] != expected_value[i]) {
                is_equal = false;
            }
        }

        if (0 == std::strcmp("sanity", test_name)) {
            EXPECT_FALSE(is_equal) << test_name;
        } else {
            EXPECT_TRUE(is_equal) << test_name;
        }
    }
}

TEST(Bmrs, BasicTest) {
    static constexpr int expected_value[] = {
            0,  1,  0,  0,  2,  0,  3,  3,  0,  3,  0,  0,  0,  0,  0,  0,  0,  2,  2,  0,  0,  0,
            0,  0,  0,  0,  0,  2,  0,  0,  4,  0,  1,  1,  0,  0,  2,  0,  0,  0,  3,  0,  0,  0,
            0,  0,  0,  0,  0,  2,  0,  2,  0,  0,  2,  2,  2,  2,  2,  0,  0,  0,  0,  0,  0,  0,
            0,  2,  0,  2,  0,  0,  0,  0,  0,  5,  0,  6,  0,  0,  0,  0,  2,  0,  2,  0,  0,  2,
            0,  0,  2,  0,  0,  0,  7,  0,  0,  0,  0,  0,  2,  0,  2,  0,  5,  5,  5,  0,  0,  6,
            0,  0,  2,  0,  2,  0,  0,  0,  0,  0,  2,  2,  2,  0,  0,  0,  0,  0,  0,  2,  0,  0,
            2,  0,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  2,  2,  0,  2,  0,  0,  0,  0,  0,  2,
            0,  0,  0,  0,  8,  0,  0,  0,  2,  2,  0,  0,  0,  0,  2,  0,  0,  2,  2,  2,  2,  2,
            0,  0,  0,  2,  0,  2,  0,  0,  0,  0,  2,  0,  0,  0,  0,  8,  9,  0,  0,  0,  2,  2,
            2,  2,  2,  2,  0,  0,  0,  0,  0,  0,  2,  2,  0,  0,  2,  2,  0,  0,  0,  2,  2,  0,
            10, 0,  0,  0,  9,  0,  2,  2,  0,  2,  0,  2,  0,  0,  2,  2,  2,  2,  0,  0,  0,  0,
            2,  2,  0,  0,  0,  2,  0,  0,  2,  0,  0,  0,  0,  11, 9,  0,  0,  0,  0,  0,  2,  0,
            0,  2,  0,  0,  0,  2,  0,  0,  2,  0,  0,  0,  2,  0,  0,  2,  0,  0,  2,  0,  0,  2,
            0,  0,  0,  0,  12, 0,  13, 0,  0,  0,  2,  0,  0,  14, 0,  2,  2,  2,  2,  0,  2,  2,
            2,  2,  0,  2,  0,  2,  2,  0,  2,  2,  2,  0,  12, 12, 0,  0,  0,  0,  2,  2,  0,  2,
            0,  0,  0,  0,  0,  0,  0,  2,  2,  2,  2,  0,  2,  2,  0,  0,  0,  2,  2,  0,  2,  2,
            12, 0,  12, 0,  0,  0,  0,  0,  0,  2,  2,  2,  0,  2,  0,  0,  0,  0,  0,  0,  2,  2,
            2,  2,  0,  0,  0,  2,  0,  0,  0,  0,  0,  0,  0,  12, 12, 0,  0,  16, 0,  2,  2,  2,
            2,  0,  0,  0,  0,  2,  2,  2,  0,  2,  0,  0,  2,  2,  2,  0,  0,  2,  2,  0,  0,  15,
            0,  0,  0,  0,  0,  16, 0,  0,  0,  0,  0,  0,  0,  0,  2,  2,  0,  0,  0,  0,  2,  0,
            0,  0,  0,  2,  2,  2,  0,  0,  15, 15, 0,  15, 0,  15, 0,  0,  16, 0,  0,  17, 0,  0,
            18, 0,  2,  0,  0,  2,  0,  0,  0,  2,  2,  0,  2,  0,  0,  2,  2,  0,  0,  15, 15, 15,
            15, 15, 0,  0,  0,  0,  0,  17, 0,  0,  0,  0,  2,  0,  0,  2,  2,  0,  0,  2,  0,  0,
            0,  0,  2,  0,  0,  2,  0,  15, 0,  0,  0,  15, 0,  17, 17, 0,  17, 0,  17, 0,  0,  2,
            0,  0,  2,  0,  2,  0,  2,  0,  0,  2,  0,  0,  0,  0,  0,  0,  0,  15, 0,  0,  0,  15,
            0,  0,  0,  17, 17, 17, 0,  0,  0,  2,  0,  0,  2,  2,  0,  0,  2,  0,  0,  2,  0,  0,
            0,  0,  2,  0,  15, 0,  0,  0,  0,  0,  0,  19, 0,  17, 0,  0,  0,  0,  2,  0,  2,  2,
            2,  2,  2,  2,  0,  2,  2,  0,  2,  0,  0,  2,  0,  2,  15, 0,  0,  19, 0,  0,  19, 0,
            0,  0,  0,  20, 20, 0,  0,  0,  0,  0,  0,  2,  0,  0,  0,  2,  0,  0,  0,  2,  0,  0,
            0,  2,  0,  0,  0,  19, 19, 0,  19, 0,  0,  19, 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
            0,  0,  2,  0,  2,  2,  2,  0,  2,  0,  0,  2,  19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
            0,  0,  0,  19, 19, 19, 0,  19, 19, 0,  19, 0,  0,  2,  2,  0,  2,  2,  2,  2,  2,  0,
            19, 0,  19, 19, 0,  19, 0,  0,  19, 0,  0,  0,  0,  0,  0,  19, 19, 0,  19, 0,  0,  19,
            0,  0,  0,  0,  2,  0,  2,  0,  0,  2,  19, 0,  19, 19, 0,  0,  0,  19, 19, 19, 19, 19,
            19, 19, 0,  19, 19, 19, 19, 19, 19, 0,  0,  21, 0,  0,  0,  2,  0,  2,  0,  0,  19, 0,
            0,  19, 0,  0,  0,  0,  0,  0,  0,  0,  19, 19, 0,  19, 0,  19, 0,  19, 19, 0,  0,  0,
            21, 21, 0,  2,  2,  0,  0,  0,  0,  19, 0,  0,  0,  0,  0,  22, 0,  0,  22, 0,  0,  0,
            19, 0,  0,  0,  0,  0,  0,  0,  23, 0,  0,  0,  0,  2,  2,  0,  0,  0,  0,  0,  0,  0,
            0,  22, 22, 0,  22, 0,  22, 22, 0,  0,  19, 0,  2,  0,  0,  0,  0,  0,  0,  0,  2,  0,
            0,  0,  2,  0,  24, 0,  0,  22, 22, 22, 0,  0,  0,  0,  0,  22, 0,  22, 22, 0,  0,  0,
            0,  2,  2,  2,  0,  0,  2,  0,  0,  2,  0,  0,  2,  0,  0,  24, 22, 22, 0,  22, 0,  22,
            22, 0,  0,  22, 22, 0,  22, 0,  0,  22, 0,  0,  0,  0,  2,  2,  0,  2,  2,  2,  0,  0,
            2,  2,  0,  24, 22, 0,  0,  22, 22, 22, 0,  22, 22, 22, 0,  0,  0,  22, 22, 0,  0,  22,
            0,  0,  0,  2,  0,  2,  0,  2,  0,  0,  2,  0,  0,  0,  0,  0,  0,  0,  22, 0,  22, 22,
            0,  0,  0,  0,  22, 0,  22, 22, 0,  22, 0,  0,  2,  0,  0,  0,  0,  2,  2,  0,  0,  2,
            2,  0,  0,  25, 0,  22, 0,  22, 22, 0,  22, 0,  0,  0,  22, 0,  22, 0,  22, 0,  0,  2,
            2,  2,  2,  2,  0,  0,  2,  2,  2,  0,  2,  0};

    cv::Mat1b image = cv::imread(GetImage("basic_random"), cv::IMREAD_GRAYSCALE);
    apriltag::BMRS ccl{image};

    ccl.PerformLabeling();
    cv::Mat1i labels = *ccl.Labels();

    EXPECT_TRUE(0 == std::memcmp(expected_value, labels.data, sizeof(expected_value)));
}